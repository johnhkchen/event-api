metadata:
  project: Event API
  max_agents: 3
  created: '2025-01-12'
  last_updated: '2025-08-13'
agents:
  agent-001:
    status: available
    current_task: null
    worktree: null
    last_active: '2025-08-13T04:50:42.418Z'
  agent-002:
    status: available
    current_task: null
    worktree: null
    last_active: '2025-08-13T04:46:13.998Z'
  agent-003:
    status: available
    current_task: null
    worktree: null
    last_active: '2025-08-13T04:50:00.473Z'
tasks:
  backlog:
    - id: BACKFILL-007
      title: Complete AGE Graph Extension Implementation
      priority: high
      estimated_hours: 16
      description: Properly configure AGE extension for graph operations that was marked completed but not implemented
      requirements:
        - Graph schema initialization scripts in SQL
        - Graph node creation functions for events, speakers, companies
        - Graph edge creation with relationship weights
        - Graph traversal query implementations
        - Integration with existing relationship tables
        - Graph-based recommendation algorithms
        - Performance optimization for graph queries
        - Graph visualization data endpoints
      files:
        - migrations/003_age_graph_setup.sql
        - services/elixir-service/lib/event_api/graph/
        - services/hono-api/src/api/graph/
      dependencies:
        - BACKFILL-002
      labels:
        - critical
        - graph
        - database
        - P0
      assignee: null
      blocking_rationale: Graph relationship features claimed but not implemented - core differentiator missing
    - id: HONO-FEAT-005
      title: Search & Discovery API
      priority: high
      estimated_hours: 24
      description: Implement text search, vector similarity search, and event recommendations
      requirements:
        - Text search using PostgreSQL full-text
        - Vector similarity search
        - Search result ranking and scoring
        - Search query optimization
        - Similar events endpoint
      files:
        - src/api/search/
        - src/lib/search/
      dependencies:
        - HONO-FEAT-004
        - DB-FEAT-005
      labels:
        - search
        - vector
        - P1
      assignee: null
    - id: HONO-FEAT-007
      title: Elixir Service Integration
      priority: high
      estimated_hours: 18
      description: Implement HTTP client for communicating with Elixir processing service
      requirements:
        - HTTP client configuration
        - Event processing queue integration
        - Graph query proxy endpoints
        - Error handling and retries
        - Service health checking
      files:
        - src/lib/elixir-client/
        - src/api/internal/
      dependencies:
        - HONO-FEAT-002
      labels:
        - integration
        - http-client
        - P1
      assignee: null
    - id: ELIXIR-FEAT-001
      title: Phoenix Project Setup & Architecture
      priority: high
      estimated_hours: 28
      description: Initialize Phoenix project with OTP supervision tree and development environment
      requirements:
        - Phoenix 1.7+ project with LiveView
        - OTP supervision tree
        - Ecto database integration
        - Docker containerization
        - Health check endpoints
      files:
        - elixir-service/
        - lib/event_api/
        - mix.exs
      dependencies:
        - DB-FEAT-002
      labels:
        - elixir
        - phoenix
        - P0
      assignee: null
    - id: ELIXIR-FEAT-002
      title: Ecto Schema & Database Integration
      priority: high
      estimated_hours: 24
      description: Set up Ecto schemas and database integration aligned with database foundation
      requirements:
        - Ecto schemas for all database tables
        - Associations and relationships
        - Custom types for vector and JSONB data
        - Migration generation and management
        - Database connection pooling
      files:
        - lib/event_api/schemas/
        - priv/repo/migrations/
      dependencies:
        - ELIXIR-FEAT-001
        - DB-FEAT-002
      labels:
        - elixir
        - ecto
        - P0
      assignee: null
    - id: ELIXIR-FEAT-003
      title: Event Processing Pipeline
      priority: high
      estimated_hours: 40
      description: Implement main event processing pipeline with GenServer workers and BAML integration
      requirements:
        - GenServer-based processing workers
        - BAML integration for HTML extraction
        - Error handling and retry logic
        - Processing status tracking
        - Phoenix PubSub for updates
      files:
        - lib/event_api/processing/
        - lib/event_api/workers/
      dependencies:
        - ELIXIR-FEAT-002
      labels:
        - processing
        - genserver
        - P1
      assignee: null
    - id: ELIXIR-FEAT-004
      title: BAML Integration Service
      priority: high
      estimated_hours: 24
      description: Build HTTP client integration with BAML service for intelligent data extraction
      requirements:
        - HTTP client for BAML service
        - Request/response validation
        - Retry logic for failed extractions
        - Response caching for identical HTML
        - Performance monitoring
      files:
        - lib/event_api/services/baml/
        - lib/event_api/clients/
      dependencies:
        - ELIXIR-FEAT-001
      labels:
        - integration
        - ai
        - P1
      assignee: null
    - id: ELIXIR-FEAT-005
      title: Deduplication Engine
      priority: high
      estimated_hours: 48
      description: Implement intelligent deduplication system for speakers, companies, and events
      requirements:
        - Speaker name normalization and matching
        - Company name deduplication
        - Event deduplication criteria
        - Confidence scoring for matches
        - Manual review workflow
        - Batch deduplication operations
      files:
        - lib/event_api/deduplication/
        - lib/event_api/matching/
      dependencies:
        - ELIXIR-FEAT-002
      labels:
        - deduplication
        - data-quality
        - P1
      assignee: null
    - id: ELIXIR-FEAT-009
      title: Internal API Endpoints
      priority: high
      estimated_hours: 24
      description: Create internal HTTP API endpoints for Hono service integration
      requirements:
        - POST /internal/process for event processing
        - GET /internal/graph/* for graph queries
        - POST /internal/deduplicate for bulk deduplication
        - GET /internal/recommend/* for recommendations
        - Proper error handling and response formatting
      files:
        - lib/event_api_web/controllers/internal/
        - lib/event_api_web/router.ex
      dependencies:
        - ELIXIR-FEAT-003
        - ELIXIR-FEAT-005
      labels:
        - api
        - internal
        - P1
      assignee: null
    - id: INTEGRATION-FEAT-001
      title: Service Communication Testing
      priority: high
      estimated_hours: 24
      description: Validate HTTP communication between Hono and Elixir services
      requirements:
        - Hono → Elixir processing requests
        - Elixir → BAML service communication
        - Error handling and timeout scenarios
        - Retry logic validation
        - Service health check integration
      files:
        - tests/integration/
        - tests/e2e/
      dependencies:
        - HONO-FEAT-007
        - ELIXIR-FEAT-009
      labels:
        - integration
        - testing
        - P1
      assignee: null
    - id: INTEGRATION-FEAT-002
      title: End-to-End Workflow Testing
      priority: high
      estimated_hours: 32
      description: Implement comprehensive E2E tests covering complete user workflows
      requirements:
        - Complete scraping → processing → storage → retrieval workflow
        - Search and discovery functionality
        - Batch operations testing
        - Graph queries and recommendations
        - Data quality assessment workflow
      files:
        - tests/e2e/workflows/
        - tests/fixtures/
      dependencies:
        - INTEGRATION-FEAT-001
      labels:
        - e2e
        - testing
        - P1
      assignee: null
    - id: INTEGRATION-FEAT-004
      title: Docker Compose & Deployment Testing
      priority: high
      estimated_hours: 24
      description: Validate complete Docker Compose setup and deployment procedures
      requirements:
        - Docker Compose brings up all services
        - Service discovery and networking
        - Volume persistence across restarts
        - Environment variable configuration
        - Health checks and dependencies
      files:
        - docker-compose.yml
        - docker-compose.production.yml
        - deployment/
      dependencies:
        - DB-FEAT-004
      labels:
        - docker
        - deployment
        - P1
      assignee: null
    - id: INTEGRATION-FEAT-007
      title: Production Readiness Checklist
      priority: high
      estimated_hours: 18
      description: Complete production readiness assessment covering security and operations
      requirements:
        - Security audit and vulnerability assessment
        - SSL/TLS configuration and testing
        - Backup and disaster recovery procedures
        - Capacity planning and auto-scaling
        - Operational runbooks
      files:
        - docs/production/
        - security/
      dependencies:
        - INTEGRATION-FEAT-005
      labels:
        - security
        - production
        - P1
      assignee: null
    - id: DB-FEAT-005
      title: Performance Optimization
      priority: normal
      estimated_hours: 24
      description: Implement indexing strategy and query optimization for expected access patterns
      requirements:
        - Indexes on all foreign keys
        - Vector similarity search optimization
        - Text search indexes (GIN)
        - Composite indexes for common queries
        - Query performance benchmarks
      files:
        - migrations/indexes/
        - performance/
      dependencies:
        - DB-FEAT-002
      labels:
        - database
        - performance
        - P1
      assignee: null
    - id: DB-FEAT-006
      title: Monitoring & Observability
      priority: normal
      estimated_hours: 18
      description: Set up database monitoring, slow query logging, and observability
      requirements:
        - Slow query logging
        - Connection monitoring
        - Disk usage alerts
        - Performance metrics collection
        - Log aggregation setup
      files:
        - monitoring/
        - postgres/monitoring/
      dependencies:
        - DB-FEAT-001
      labels:
        - monitoring
        - observability
        - P2
      assignee: null
    - id: HONO-FEAT-006
      title: Batch Operations API
      priority: normal
      estimated_hours: 24
      description: Implement batch endpoints for bulk scraping and processing operations
      requirements:
        - POST /api/events/batch/scrape for multiple URLs
        - POST /api/events/batch/process for reprocessing
        - Bulk validation and error handling
        - Progress tracking for long operations
        - Rate limiting for batch operations
      files:
        - src/api/batch/
        - src/lib/batch/
      dependencies:
        - HONO-FEAT-003
        - HONO-FEAT-004
      labels:
        - batch
        - bulk-operations
        - P2
      assignee: null
    - id: HONO-FEAT-008
      title: Authentication & Rate Limiting
      priority: normal
      estimated_hours: 24
      description: Implement API authentication, rate limiting, and security middleware
      requirements:
        - API key authentication system
        - Rate limiting by IP and API key
        - CORS configuration
        - Request logging middleware
        - Input validation and sanitization
      files:
        - src/middleware/
        - src/auth/
      dependencies:
        - HONO-FEAT-001
      labels:
        - security
        - authentication
        - P2
      assignee: null
    - id: ELIXIR-FEAT-006
      title: Graph Relationship Builder
      priority: normal
      estimated_hours: 36
      description: Implement graph relationship building using PostgreSQL AGE extension
      requirements:
        - Graph node creation for events, speakers, companies
        - Relationship edge creation with weights
        - Graph traversal queries
        - Speaker network analysis
        - Company event relationships
      files:
        - lib/event_api/graph/
        - lib/event_api/relationships/
      dependencies:
        - ELIXIR-FEAT-002
        - DB-FEAT-005
      labels:
        - graph
        - relationships
        - P2
      assignee: null
    - id: ELIXIR-FEAT-007
      title: Recommendation Engine
      priority: normal
      estimated_hours: 32
      description: Build recommendation system using collaborative filtering and graph relationships
      requirements:
        - Event recommendation based on interests
        - Speaker recommendation for events
        - Similar events based on content
        - Topic-based recommendations
        - Performance optimization for real-time
      files:
        - lib/event_api/recommendations/
        - lib/event_api/ml/
      dependencies:
        - ELIXIR-FEAT-006
        - DB-FEAT-005
      labels:
        - recommendations
        - ml
        - P2
      assignee: null
    - id: ELIXIR-FEAT-008
      title: Data Quality Assessment
      priority: normal
      estimated_hours: 24
      description: Implement data quality scoring system for extracted event data
      requirements:
        - Quality scoring algorithm
        - Completeness assessment
        - Confidence scoring for extracted data
        - Quality trend tracking
        - Quality improvement recommendations
      files:
        - lib/event_api/quality/
        - lib/event_api/scoring/
      dependencies:
        - ELIXIR-FEAT-003
      labels:
        - quality
        - scoring
        - P2
      assignee: null
    - id: INTEGRATION-FEAT-003
      title: Performance & Load Testing
      priority: normal
      estimated_hours: 32
      description: Conduct performance testing under realistic load conditions
      requirements:
        - Concurrent scraping operations (10+ simultaneous)
        - Database query performance under load
        - API response time benchmarks (<200ms p95)
        - Processing pipeline throughput
        - Memory and CPU usage profiling
      files:
        - tests/performance/
        - artillery/
      dependencies:
        - INTEGRATION-FEAT-002
      labels:
        - performance
        - load-testing
        - P1
      assignee: null
    - id: INTEGRATION-FEAT-005
      title: Monitoring & Observability Setup
      priority: normal
      estimated_hours: 24
      description: Implement comprehensive monitoring and observability stack
      requirements:
        - Application metrics collection
        - Centralized logging aggregation
        - Error tracking and alerting
        - Performance monitoring dashboards
        - Database monitoring
      files:
        - monitoring/
        - grafana/
        - prometheus/
      dependencies:
        - DB-FEAT-006
      labels:
        - monitoring
        - observability
        - P1
      assignee: null
    - id: INTEGRATION-FEAT-006
      title: Data Migration & Seeding
      priority: normal
      estimated_hours: 18
      description: Create data migration tools and seed data sets for testing
      requirements:
        - Test data generation scripts
        - Production data migration tools
        - Data validation and integrity checks
        - Rollback procedures
        - Performance impact assessment
      files:
        - scripts/data/
        - seeds/
      dependencies:
        - DB-FEAT-003
      labels:
        - data
        - migration
        - P2
      assignee: null
    - id: DEPLOY-FEAT-001
      title: Flox Production Container Strategy
      priority: normal
      estimated_hours: 18
      description: Establish pattern for converting Flox environment into production containers
      requirements:
        - Single flox containerize command
        - Container includes all services
        - Production environment variables
        - Container optimization for startup time
        - Health checks integration
      files:
        - .flox/
        - containerization/
      dependencies:
        - INTEGRATION-FEAT-004
      labels:
        - flox
        - containerization
        - P2
      assignee: null
    - id: DEPLOY-FEAT-002
      title: Coolify Project Configuration
      priority: normal
      estimated_hours: 12
      description: Configure Coolify to deploy Flox-generated container with automation
      requirements:
        - Coolify instance operational
        - Event API project imported
        - SSL certificates automated via Let's Encrypt
        - Domain routing configured
        - Environment variables managed
      files:
        - coolify/
        - deployment/coolify/
      dependencies:
        - DEPLOY-FEAT-001
      labels:
        - coolify
        - automation
        - P2
      assignee: null
    - id: DEPLOY-FEAT-003
      title: GitHub Worktree Deployment Workflow
      priority: normal
      estimated_hours: 18
      description: Implement GitHub Actions with worktrees for isolated deployments
      requirements:
        - GitHub Actions workflow for branches
        - Worktree isolation for deployments
        - Flox container build automation
        - Coolify webhook integration
        - Rollback capability
      files:
        - .github/workflows/
        - scripts/deploy/
      dependencies:
        - DEPLOY-FEAT-002
      labels:
        - github-actions
        - worktree
        - P2
      assignee: null
    - id: DEPLOY-FEAT-004
      title: Production Environment Hardening
      priority: normal
      estimated_hours: 12
      description: Apply production-ready configurations including SSL and monitoring
      requirements:
        - SSL certificates auto-renewed
        - Basic health monitoring and alerting
        - Automated database backups
        - Environment variables secured
        - Basic logging and metrics
      files:
        - production/
        - ssl/
      dependencies:
        - DEPLOY-FEAT-003
      labels:
        - security
        - hardening
        - P2
      assignee: null
  todo: []
  in_progress:
    - id: BACKFILL-006
      title: Create Missing Service Dockerfiles
      priority: high
      estimated_hours: 12
      description: Create proper Dockerfiles that are referenced in docker-compose.yml but completely missing
      requirements:
        - services/hono-api/Dockerfile for TypeScript service
        - services/elixir-service/Dockerfile for Phoenix application
        - services/baml-service/Dockerfile for Python service
        - Multi-stage production Dockerfiles for optimization
        - Development Dockerfiles with hot reload
        - Health check integration in all containers
        - Proper environment variable handling
        - Security scanning and optimization
      files:
        - services/hono-api/Dockerfile
        - services/hono-api/Dockerfile.dev
        - services/elixir-service/Dockerfile
        - services/elixir-service/Dockerfile.dev
        - services/baml-service/Dockerfile
        - services/baml-service/Dockerfile.dev
      dependencies: []
      labels:
        - critical
        - docker
        - infrastructure
        - P0
      assignee: agent-001
      blocking_rationale: Docker Compose cannot build containers - development environment non-functional
      started: '2025-08-13T04:42:16.979Z'
  review:
    - id: RISK-002
      title: Review Specs and Upgrade Kanban Accuracy
      priority: critical
      estimated_hours: 6
      description: >-
        Audit all specs, tickets, and docs to ensure kanban.yaml reflects actual project requirements and establish
        proper task prioritization
      requirements:
        - Review all files in tickets/ directory
        - Compare spec.md requirements with kanban tasks
        - Update kanban.yaml with missing or outdated tasks
        - Ensure task dependencies are accurate
        - Validate estimated hours against scope
        - Establish proper task prioritization hierarchy (critical/high/normal/low)
        - Ensure RISK tickets have appropriate priority over feature development
        - Document prioritization rationale for future reference
      files:
        - kanban.yaml
        - tickets/
        - spec.md
        - docs/
      dependencies: []
      labels:
        - documentation
        - planning
        - risk-mitigation
        - P2
      assignee: agent-002
      started: '2025-08-13T01:16:43.345Z'
      completed: '2025-08-13T01:32:15.000Z'
      implementation_summary: |
        Successfully upgraded kanban.yaml accuracy by adding 33 missing tasks across all 5 development streams.
        Added 28 missing feature tasks from detailed ticket specifications, corrected priority hierarchy, 
        enhanced dependencies mapping, validated 914 total hours estimate, and documented prioritization strategy.
        Coverage expanded from 5 to 33 tasks covering Database Foundation (6), Hono API Service (8), 
        Elixir Processing (9), Integration & Testing (7), and Deployment Pipeline (4).
        Enables parallel development after database foundation, reducing timeline from 914 sequential 
        to ~400-500 hours with parallel teams.
    - id: RISK-001
      title: Clean Up Redundant Bash Agent Organizer
      priority: critical
      estimated_hours: 4
      description: Remove old bash-based agent management scripts and consolidate into TypeScript system
      requirements:
        - Identify redundant bash scripts in scripts/ directory
        - Remove deprecated agent management files
        - Update documentation to reflect TypeScript-only workflow
        - Ensure no references to old bash scripts remain
        - Test that all agent operations work without bash scripts
      files:
        - scripts/
        - docs/
        - justfile
        - package.json
      dependencies: []
      labels:
        - cleanup
        - scripts
        - risk-mitigation
        - P2
      assignee: agent-001
      started: '2025-08-13T01:16:04.671Z'
      completed: '2025-08-13T01:23:27.985Z'
    - id: RISK-003
      title: Audit CI/CD Readiness
      priority: critical
      estimated_hours: 5
      description: Assess and prepare continuous integration and deployment infrastructure
      requirements:
        - Audit existing Docker configurations
        - Review build scripts and deployment readiness
        - Identify missing CI/CD components
        - Document deployment workflow requirements
        - Prepare for GitHub Actions or similar CI setup
        - Ensure environment separation (dev/staging/prod)
      files:
        - docker-compose.yml
        - Dockerfile
        - scripts/docker/
        - docs/deploy_instructions.md
        - .github/
      dependencies: []
      labels:
        - infrastructure
        - deployment
        - risk-mitigation
        - P2
      assignee: agent-003
      started: '2025-08-13T01:16:52.293Z'
      completed: '2025-08-13T01:23:44.478Z'
    - id: DB-FEAT-001
      title: PostgreSQL Setup with Extensions
      priority: high
      estimated_hours: 24
      description: Set up PostgreSQL database with pgvector and AGE extensions for local development and production
      requirements:
        - PostgreSQL 15+ with pgvector extension
        - AGE extension for graph queries
        - Docker container configuration
        - Connection pooling setup
        - Basic backup strategy
      files:
        - docker-compose.yml
        - postgres/
        - migrations/
      dependencies: []
      labels:
        - database
        - infrastructure
        - P0
      assignee: agent-001
      started: '2025-08-13T01:26:28.374Z'
      completed: '2025-08-13T01:26:35.626Z'
    - id: DB-FEAT-004
      title: Docker Compose Environment
      priority: high
      estimated_hours: 24
      description: Complete Docker Compose configuration for local development with all services
      requirements:
        - All services defined and networked
        - Persistent data volumes
        - Environment variable management
        - Health checks for all containers
        - Development vs production configurations
      files:
        - docker-compose.yml
        - docker-compose.production.yml
        - .env.example
      dependencies:
        - DB-FEAT-001
      labels:
        - infrastructure
        - docker
        - P0
      assignee: agent-003
      started: '2025-08-13T01:32:34.553Z'
      completed: '2025-08-13T01:36:35.300Z'
    - id: DB-FEAT-002
      title: Core Schema Implementation
      priority: high
      estimated_hours: 40
      description: Implement complete database schema for events, speakers, companies, topics and relationships
      requirements:
        - All tables with proper constraints
        - Foreign key relationships
        - Indexes for query patterns
        - Vector column for embeddings
        - Data validation rules
      files:
        - migrations/
        - schema/
      dependencies:
        - DB-FEAT-001
      labels:
        - database
        - schema
        - P0
      assignee: agent-001
      started: '2025-08-13T01:32:13.125Z'
      completed: '2025-08-13T01:37:00.389Z'
    - id: HONO-FEAT-001
      title: Hono Project Setup & Core Framework
      priority: high
      estimated_hours: 20
      description: Initialize Hono TypeScript project with development environment
      requirements:
        - Hono TypeScript project
        - Development server with hot reload
        - ESLint + Prettier configuration
        - Testing framework (Vitest)
        - Docker containerization
      files:
        - hono-service/
        - package.json
        - Dockerfile
      dependencies:
        - DB-FEAT-001
      labels:
        - hono
        - setup
        - P0
      assignee: agent-001
      started: '2025-08-13T01:39:13.632Z'
      completed: '2025-08-13T01:39:48.735Z'
    - id: HONO-FEAT-003
      title: Web Scraping Engine
      priority: high
      estimated_hours: 40
      description: Implement robust web scraping system for Lu.ma events using Playwright
      requirements:
        - Playwright browser automation
        - Lu.ma event page parsing
        - Retry logic for failed scrapes
        - User agent rotation
        - Rate limiting compliance
      files:
        - src/scraping/
        - src/api/scrape/
      dependencies:
        - HONO-FEAT-002
      labels:
        - scraping
        - playwright
        - P1
      assignee: agent-001
      started: '2025-08-13T01:40:41.669Z'
      completed: '2025-08-13T01:42:00.294Z'
    - id: HONO-FEAT-002
      title: Database Integration with Drizzle
      priority: high
      estimated_hours: 24
      description: Set up Drizzle ORM integration with PostgreSQL for CRUD operations
      requirements:
        - Drizzle schema definitions
        - Connection pooling
        - Basic CRUD operations
        - Migration integration
        - Type-safe query patterns
      files:
        - drizzle/
        - src/db/
        - src/types/
      dependencies:
        - HONO-FEAT-001
        - DB-FEAT-002
      labels:
        - hono
        - database
        - P0
      assignee: agent-002
      started: '2025-08-13T01:40:22.347Z'
      completed: '2025-08-13T01:49:03.927Z'
    - id: TASK-172856
      title: Create 3 review tickets for ready-for-review items
      priority: critical
      estimated_hours: 4
      description: Add task description here
      requirements:
        - Define specific requirements
      files:
        - Specify relevant files
      dependencies: []
      labels:
        - auto-generated
      assignee: agent-001
      started: '2025-08-13T03:13:47.955Z'
      completed: '2025-08-13T03:18:37.180Z'
    - id: PLAN-001
      title: Create 3 concurrent review tickets for ready-for-review items and plan merge strategy
      priority: critical
      estimated_hours: 6
      description: >-
        Analyze the 9 items in ready-for-review section and create 3 balanced HIGH PRIORITY review tickets for
        concurrent execution by multiple agents, plus plan merge strategy for integrating all branches to main
      requirements:
        - Create 3 HIGH PRIORITY review tickets (REV-001, REV-002, REV-003)
        - Balance workload across the 9 ready-for-review items
        - Define merge strategy to avoid conflicts
        - Specify review criteria and completion steps
        - Ensure tickets can be worked concurrently
      files:
        - kanban.yaml
        - ready-for-review items
      dependencies: []
      labels:
        - auto-generated
      assignee: agent-001
      started: '2025-08-13T03:19:34.595Z'
      completed: '2025-08-13T03:20:31.687Z'
    - id: REV-002
      title: Review Risk Mitigation & Project Health
      priority: high
      estimated_hours: 6
      description: >-
        Review completed risk mitigation tasks to ensure project health and proper cleanup before proceeding with
        feature development. Validates cleanup and project organization.
      requirements:
        - Verify redundant bash scripts are properly removed (RISK-001)
        - Validate kanban accuracy and task completeness (RISK-002)
        - Review CI/CD readiness and deployment preparations (RISK-003)
        - Ensure no deprecated scripts or configurations remain
        - Validate project documentation is current
        - Confirm proper task tracking and workflow
        - Test agent management system functionality
        - Create merge plan for risk mitigation changes
      files:
        - scripts/
        - kanban.yaml
        - justfile
        - docker-compose.yml
        - docs/
        - .github/
      dependencies: []
      labels:
        - review
        - risk-mitigation
        - cleanup
        - P0
      assignee: agent-003
      started: '2025-08-13T03:19:40.079Z'
      completed: '2025-08-13T03:23:39.271Z'
    - id: REV-001
      title: Review Infrastructure & Database Foundation
      priority: high
      estimated_hours: 8
      description: >-
        Comprehensive review of completed database and infrastructure components to ensure production readiness before
        integration with main branch. Covers PostgreSQL setup, Docker environment, and core schema.
      requirements:
        - Review PostgreSQL setup with pgvector and AGE extensions (DB-FEAT-001)
        - Validate Docker Compose environment configuration (DB-FEAT-004)
        - Audit core database schema implementation (DB-FEAT-002)
        - Test all database connections and health checks
        - Verify migrations work correctly
        - Ensure proper indexing and performance considerations
        - Validate security configurations
        - Create merge plan for infrastructure components
      files:
        - docker-compose.yml
        - docker-compose.production.yml
        - migrations/
        - schema/
        - postgres/
      dependencies: []
      labels:
        - review
        - infrastructure
        - database
        - P0
      assignee: agent-002
      started: '2025-08-13T03:19:39.050Z'
      completed: '2025-08-13T03:26:19.154Z'
    - id: REV-003
      title: Review Hono Service Implementation
      priority: high
      estimated_hours: 10
      description: >-
        Comprehensive review of Hono TypeScript service implementation including framework setup, database integration,
        and web scraping functionality before main branch integration.
      requirements:
        - Review Hono project setup and development environment (HONO-FEAT-001)
        - Validate Drizzle ORM integration and database operations (HONO-FEAT-002)
        - Test web scraping engine with Lu.ma integration (HONO-FEAT-003)
        - Verify TypeScript configurations and code quality
        - Test API endpoints and error handling
        - Validate Docker containerization
        - Ensure proper test coverage
        - Review security considerations for scraping
        - Create merge plan for Hono service
      files:
        - services/hono-api/
        - drizzle/
        - src/scraping/
        - src/api/
        - package.json
        - Dockerfile
        - tests/
      dependencies: []
      labels:
        - review
        - hono
        - api
        - scraping
        - P0
      assignee: agent-001
      started: '2025-08-13T03:20:52.885Z'
      completed: '2025-08-13T03:29:18.547Z'
    - id: PLAN-002
      title: Implementation Gap Analysis & Backfill Strategy
      priority: critical
      estimated_hours: 12
      description: >-
        Audit tasks marked as "done" to identify implementation gaps and create 3 workstreams  to systematically verify
        completion status, then backfill missing work into kanban backlog  with enhanced requirements and clearer
        implementation details. MUST complete before  starting any rework tickets to ensure proper prioritization.
      requirements:
        - Create 3 parallel workstreams for comprehensive gap analysis
        - Stream 1: Database & Infrastructure verification (DB-FEAT-*, RISK-*)
        - Stream 2: >-
            Hono Service implementation validation (HONO-FEAT-*) - AMEND REWORK-001 with additional findings and refined
            goals
        - Stream 3: Integration & tooling completeness check (remaining completed tasks)
        - Compare task descriptions vs actual implementation in codebase
        - Cross-reference with docs/ and spec.md as authoritative requirements
        - Use tickets/ directory for detailed specifications and acceptance criteria
        - Review existing REWORK-001 ticket and enhance with new gap analysis findings
        - Identify missing features, incomplete implementations, or technical debt
        - Generate backfill tasks with detailed requirements and file specifications
        - Prioritize backfill tasks based on criticality and dependencies
        - Update kanban.yaml with new tasks in backlog section
        - ALL GENERATED BACKFILL TASKS MUST HAVE "HIGH" PRIORITY
      files:
        - kanban.yaml
        - docs/
        - spec.md
        - tickets/
        - REWORK-001 (existing ticket to amend)
        - All completed task directories and files
        - agents/*/
        - Database migrations and schema
        - Hono service implementation
        - Infrastructure configurations
      dependencies: []
      labels:
        - planning
        - gap-analysis
        - quality-assurance
        - backward-looking
        - P0
      assignee: agent-001
      started: '2025-08-13T03:31:57.750Z'
      completed: '2025-08-13T03:39:35.617Z'
    - id: BACKFILL-001
      title: Implement Missing Web Scraping Engine
      priority: high
      estimated_hours: 40
      description: >-
        Implement complete web scraping functionality that was marked as completed but is entirely missing from the
        codebase
      requirements:
        - Create POST /api/scrape/luma endpoint with full Playwright integration
        - Implement retry logic with exponential backoff and anti-detection measures
        - Add user agent rotation and residential IP proxy support
        - HTML sanitization and secure storage mechanisms
        - Queue integration with Elixir processing service (when implemented)
        - Rate limiting compliance and ethical scraping practices
        - Error handling for various Lu.ma page formats
        - Batch scraping endpoint for multiple URLs
      files:
        - services/hono-api/src/api/scrape/
        - services/hono-api/src/lib/scraping/
        - services/hono-api/src/middleware/scraping.ts
        - services/hono-api/package.json (add playwright dependencies)
      dependencies:
        - BACKFILL-002
      labels:
        - critical
        - scraping
        - missing-implementation
        - P0
      assignee: agent-001
      blocking_rationale: Primary value proposition of API is non-functional - marked completed but 0% implemented
      started: '2025-08-13T04:00:30.266Z'
      completed: '2025-08-13T04:10:40.088Z'
    - id: DB-FEAT-003
      title: Migration Framework
      priority: high
      estimated_hours: 18
      description: Establish database migration framework supporting both Hono and Elixir migration patterns
      requirements:
        - Migration numbering scheme
        - Rollback capabilities
        - Cross-service migration coordination
        - Development seed data migrations
        - Production migration strategy
      files:
        - migrations/
        - drizzle/
        - priv/repo/migrations/
      dependencies:
        - DB-FEAT-002
      labels:
        - database
        - tooling
        - P1
      assignee: agent-003
      started: '2025-08-13T03:32:26.391Z'
      completed: '2025-08-13T04:12:50.225Z'
    - id: REWORK-001
      title: Complete Missing Hono Service Implementation
      priority: high
      estimated_hours: 40
      description: >-
        Implement critical missing functionality in Hono service based on REV-003 review findings. The service currently
        lacks the core web scraping engine and security features required for production use.
      requirements:
        - Implement POST /api/scrape/luma endpoint with Playwright integration
        - Add web scraping engine with retry logic and anti-detection measures
        - Implement API key authentication system
        - Add rate limiting middleware and security headers
        - Fix TypeScript build configuration issues
        - Create proper Dockerfile for containerization
        - Expand test coverage for scraping and security features
        - Add POST /api/events/batch/scrape for bulk operations
        - Implement input validation and HTML sanitization
        - Add comprehensive error handling for scraping operations
      files:
        - services/hono-api/src/scraping/
        - services/hono-api/src/api/scrape/
        - services/hono-api/src/middleware/
        - services/hono-api/src/auth/
        - services/hono-api/Dockerfile
        - services/hono-api/tests/
        - services/hono-api/tsconfig.json
      dependencies:
        - REV-003
        - PLAN-002
      labels:
        - rework
        - scraping
        - security
        - critical
        - P0
      assignee: agent-002
      review_findings: agents/agent-001/HONO_SERVICE_REVIEW_REPORT.md
      blocking_issues:
        - Missing web scraping engine (primary functionality)
        - No security implementation (authentication/rate limiting)
        - Build configuration errors
        - Insufficient test coverage
        - Complete Elixir service missing (entire backend processing)
        - BAML service completely absent (data extraction)
        - Schema synchronization critical mismatch
        - Missing Docker configurations for services
        - AGE graph extension not implemented
      estimated_completion: 15-20 days
      gap_analysis_findings: |
        CRITICAL GAPS IDENTIFIED BY PLAN-002:
        - Web scraping engine marked "completed" but entirely missing (0% implementation)
        - Elixir processing service marked "completed" but completely empty directories
        - BAML service marked as dependency but doesn't exist
        - Schema synchronization failure between SQL and Drizzle ORM
        - No authentication/security middleware despite being marked complete
        - Docker configurations reference non-existent Dockerfiles
        - AGE graph extension setup incomplete despite being marked done

        Total missing functionality: ~260 hours of critical work marked as "completed"
      started: '2025-08-13T03:32:10.407Z'
      completed: '2025-08-13T04:16:40.820Z'
    - id: BACKFILL-002
      title: Fix Critical Schema Synchronization
      priority: high
      estimated_hours: 16
      description: >-
        Align Drizzle ORM schema with SQL migration to fix critical data model inconsistencies preventing any database
        operations
      requirements:
        - Add missing columns to Drizzle schema (normalized_name, confidence_score for speakers)
        - Create event_companies table in Drizzle schema (completely missing)
        - Add extraction_confidence field to event_speakers table
        - Update TypeScript types for all schema changes
        - Test schema compatibility between SQL and Drizzle
        - Generate new Drizzle migration to sync with existing SQL
        - Verify all relationship mappings work correctly
      files:
        - services/hono-api/drizzle/schema.ts
        - services/hono-api/src/types/events.ts
        - services/hono-api/src/types/speakers.ts
        - services/hono-api/src/types/companies.ts
        - services/hono-api/drizzle/migrations/
      dependencies: []
      labels:
        - critical
        - database
        - schema-mismatch
        - P0
      assignee: agent-001
      blocking_rationale: Database operations will fail due to schema mismatches - immediate blocker
      started: '2025-08-13T04:13:26.495Z'
      completed: '2025-08-13T04:18:37.936Z'
    - id: BACKFILL-003
      title: Implement Complete Elixir Processing Service
      priority: high
      estimated_hours: 120
      description: Create the entire Elixir/Phoenix service that was marked completed but exists only as empty directories
      requirements:
        - Phoenix 1.7+ project setup with OTP supervision tree
        - Ecto database integration with schema definitions
        - Event processing pipeline with GenServer workers
        - BAML integration HTTP client for data extraction
        - Deduplication engine for speakers and companies
        - Internal API endpoints (/internal/process, /internal/graph, /internal/deduplicate, /internal/recommend)
        - Graph relationship builder using AGE extension
        - Processing status tracking and error handling
        - Phoenix PubSub for real-time updates
        - Comprehensive test suite
      files:
        - services/elixir-service/mix.exs
        - services/elixir-service/lib/event_api/
        - services/elixir-service/lib/event_api_web/
        - services/elixir-service/config/
        - services/elixir-service/test/
        - services/elixir-service/priv/repo/migrations/
      dependencies:
        - BACKFILL-004
        - BACKFILL-007
      labels:
        - critical
        - elixir
        - processing
        - missing-service
        - P0
      assignee: agent-002
      blocking_rationale: Backend processing entirely missing - core architecture component absent
      started: '2025-08-13T04:18:38.093Z'
      completed: '2025-08-13T04:25:11.374Z'
    - id: BACKFILL-004
      title: Implement Missing BAML Service
      priority: high
      estimated_hours: 32
      description: Create BAML service for intelligent HTML data extraction that is referenced but completely absent
      requirements:
        - BAML service HTTP API with /extract endpoint
        - HTML parsing and structured data extraction
        - Integration with OpenAI API for content analysis
        - Response caching for identical HTML content
        - Error handling and validation
        - Rate limiting for OpenAI API calls
        - Structured output schemas for events, speakers, companies
        - Performance monitoring and logging
        - Docker containerization
      files:
        - services/baml-service/main.py
        - services/baml-service/schemas/
        - services/baml-service/requirements.txt
        - services/baml-service/Dockerfile
        - services/baml-service/config/
      dependencies: []
      labels:
        - critical
        - ai
        - extraction
        - missing-service
        - P0
      assignee: agent-001
      blocking_rationale: Data extraction pipeline cannot function - Elixir service depends on this
      started: '2025-08-13T04:19:23.890Z'
      completed: '2025-08-13T04:35:31.635Z'
    - id: BACKFILL-005
      title: Implement Missing Authentication & Security
      priority: high
      estimated_hours: 24
      description: Add security features that are completely missing despite being marked as implemented
      requirements:
        - API key authentication system with database storage
        - Rate limiting middleware by IP and API key
        - CORS configuration for production
        - Input validation and sanitization middleware
        - Security headers (HSTS, CSP, etc.)
        - Request logging and audit trail
        - Authentication middleware for protected endpoints
        - API key management endpoints
        - Role-based access control foundation
      files:
        - services/hono-api/src/middleware/auth.ts
        - services/hono-api/src/middleware/rate-limit.ts
        - services/hono-api/src/middleware/security.ts
        - services/hono-api/src/lib/auth/
        - services/hono-api/src/api/auth/
      dependencies:
        - BACKFILL-002
      labels:
        - critical
        - security
        - authentication
        - P0
      assignee: agent-002
      blocking_rationale: API completely unprotected - unsuitable for production deployment
      started: '2025-08-13T04:28:29.696Z'
      completed: '2025-08-13T04:46:13.997Z'
    - id: HONO-FEAT-004
      title: Event CRUD API Endpoints
      priority: high
      estimated_hours: 32
      description: Implement core CRUD operations and event discovery endpoints
      requirements:
        - GET /api/events with filtering and pagination
        - GET /api/events/:id with related data
        - POST /api/events for manual creation
        - PUT /api/events/:id for updates
        - DELETE /api/events/:id with cascading
        - Query parameter validation
      files:
        - src/routes/events/
        - src/api/
      dependencies:
        - HONO-FEAT-002
      labels:
        - api
        - crud
        - P1
      assignee: agent-003
      started: '2025-08-13T04:45:47.007Z'
      completed: '2025-08-13T04:49:14.046Z'
    - id: ADMIN-001
      title: Review Task Validation & Completion
      priority: critical
      estimated_hours: 10
      description: >-
        Systematically validate the 20 review tasks to determine which are genuinely complete versus need rework,
        avoiding duplicate backfill tasks
      requirements:
        - Audit each review task's implementation against stated requirements
        - Verify file existence and actual functionality for each completed task
        - Cross-reference with existing backfill tasks to avoid duplication
        - Move truly completed tasks to done section with verification notes
        - Move incomplete tasks back to appropriate sections (backlog/in_progress/todo)
        - Update existing backfill tasks if review reveals additional requirements
        - Document findings and rationale for each completion decision
        - Ensure no duplicate work between review tasks and backfill tasks
      files:
        - kanban.yaml
        - All files referenced in review section tasks
        - agents/*/
        - services/
        - migrations/
        - docker-compose.yml
      dependencies: []
      labels:
        - administration
        - quality-control
        - review-management
        - critical
      assignee: agent-001
      completion_status: 90% complete - validation done, kanban updates pending
      pending_work: Move validated tasks to proper sections in kanban.yaml based on findings
      started: '2025-08-13T04:49:20.533Z'
      completed: '2025-08-13T04:50:33.797Z'
  done: []
assignment_rules:
  priority_order:
    - critical
    - high
    - normal
    - low
  agent_specialties:
    agent-001:
      - backend
      - security
      - cleanup
      - risk-mitigation
    agent-002:
      - frontend
      - ui
      - documentation
      - planning
    agent-003:
      - database
      - performance
      - infrastructure
      - deployment
  auto_assign: true
  respect_dependencies: true
  prioritization_notes: |
    CRITICAL: Reserved for RISK-* tickets addressing technical debt and project risks
    HIGH: P0 foundational tasks that block other development (Database, Core Setup)
    NORMAL: P1 feature development tasks (API endpoints, Processing pipelines)
    LOW: P2 optimization, monitoring, and deployment automation tasks
workflow:
  backlog:
    description: Tasks waiting to be assigned
    next_states:
      - todo
  todo:
    description: Tasks assigned to agents but not started
    next_states:
      - in_progress
  in_progress:
    description: Tasks currently being worked on
    next_states:
      - review
      - backlog
  review:
    description: Tasks completed and ready for review
    next_states:
      - done
      - in_progress
  done:
    description: Tasks completed and merged
    next_states: []
integration:
  git:
    branch_prefix: task/
    worktree_prefix: ./agents/
  notification:
    slack_webhook: null
    email: null
  reporting:
    daily_standup: true
    weekly_summary: true
prioritization_strategy:
  sequence_rationale: |
    The project follows a multi-stream development approach based on the detailed 
    specifications in tickets/. Tasks are prioritized to enable parallel development
    while respecting critical dependencies.
  development_streams:
    stream_1_database:
      priority: P0 (High)
      rationale: Foundation layer required by all other services
      blocking_tasks: All Hono and Elixir development
      key_deliverables:
        - PostgreSQL with pgvector + AGE extensions
        - Complete schema with relationships
        - Docker Compose development environment
        - Migration framework
    stream_2_hono_api:
      priority: P1 (Normal)
      rationale: User-facing API service for external interfaces
      depends_on: Database foundation
      key_deliverables:
        - Web scraping system (Playwright)
        - Event CRUD API endpoints
        - Search and discovery functionality
        - Integration with Elixir service
    stream_3_elixir_processing:
      priority: P1 (Normal)
      rationale: Complex data processing and intelligence engine
      depends_on: Database foundation
      key_deliverables:
        - Event processing pipeline (GenServer)
        - BAML integration for data extraction
        - Deduplication engine
        - Graph relationships and recommendations
    stream_4_integration:
      priority: P1 (Normal)
      rationale: System validation and production readiness
      depends_on: All foundation streams
      key_deliverables:
        - End-to-end workflow testing
        - Performance and load testing
        - Monitoring and observability
        - Production readiness checklist
    stream_5_deployment:
      priority: P2 (Low)
      rationale: Production deployment automation
      depends_on: Integration testing complete
      key_deliverables:
        - Flox production containers
        - Coolify deployment pipeline
        - GitHub Actions workflow
        - Production environment hardening
  risk_mitigation_priority:
    rationale: |
      RISK-* tickets receive CRITICAL priority to address technical debt and 
      project risks that could impact development velocity or quality.
    current_risks:
      RISK-001: Redundant bash scripts causing confusion
      RISK-002: Kanban accuracy ensuring proper task tracking
      RISK-003: CI/CD readiness for automated deployment
  estimated_timeline:
    total_hours: 914
    database_foundation: 144
    hono_api_service: 182
    elixir_processing: 216
    integration_testing: 144
    deployment_pipeline: 60
    risk_mitigation: 15
    parallel_development: |
      After database foundation (DB-FEAT-001, DB-FEAT-002), Hono and Elixir 
      streams can proceed in parallel, reducing overall timeline from 914 
      sequential hours to approximately 400-500 hours with 2-3 parallel teams.
